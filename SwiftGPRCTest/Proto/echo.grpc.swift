//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: echo.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The Echo service definition.
///
/// Usage: instantiate `Echo_EchoServiceClient`, then call methods of this protocol to make API calls.
internal protocol Echo_EchoServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol? { get }

  func echo(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Echo_EchoRequest, Echo_EchoResponse>

  func hardCodedMessage(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Echo_EchoRequest, Echo_EchoResponse>
}

extension Echo_EchoServiceClientProtocol {
  internal var serviceName: String {
    return "echo.EchoService"
  }

  /// Sends a message to the server and returns the same message.
  ///
  /// - Parameters:
  ///   - request: Request to send to Echo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func echo(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Echo_EchoRequest, Echo_EchoResponse> {
    return self.makeUnaryCall(
      path: Echo_EchoServiceClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }

  /// Returns a hardcoded message regardless of the input.
  ///
  /// - Parameters:
  ///   - request: Request to send to HardCodedMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hardCodedMessage(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Echo_EchoRequest, Echo_EchoResponse> {
    return self.makeUnaryCall(
      path: Echo_EchoServiceClientMetadata.Methods.hardCodedMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHardCodedMessageInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Echo_EchoServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Echo_EchoServiceNIOClient")
internal final class Echo_EchoServiceClient: Echo_EchoServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the echo.EchoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Echo_EchoServiceNIOClient: Echo_EchoServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the echo.EchoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The Echo service definition.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Echo_EchoServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol? { get }

  func makeEchoCall(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Echo_EchoRequest, Echo_EchoResponse>

  func makeHardCodedMessageCall(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Echo_EchoRequest, Echo_EchoResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Echo_EchoServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Echo_EchoServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeEchoCall(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Echo_EchoRequest, Echo_EchoResponse> {
    return self.makeAsyncUnaryCall(
      path: Echo_EchoServiceClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }

  internal func makeHardCodedMessageCall(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Echo_EchoRequest, Echo_EchoResponse> {
    return self.makeAsyncUnaryCall(
      path: Echo_EchoServiceClientMetadata.Methods.hardCodedMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHardCodedMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Echo_EchoServiceAsyncClientProtocol {
  internal func echo(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Echo_EchoResponse {
    return try await self.performAsyncUnaryCall(
      path: Echo_EchoServiceClientMetadata.Methods.echo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEchoInterceptors() ?? []
    )
  }

  internal func hardCodedMessage(
    _ request: Echo_EchoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Echo_EchoResponse {
    return try await self.performAsyncUnaryCall(
      path: Echo_EchoServiceClientMetadata.Methods.hardCodedMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHardCodedMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Echo_EchoServiceAsyncClient: Echo_EchoServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Echo_EchoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Echo_EchoServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'echo'.
  func makeEchoInterceptors() -> [ClientInterceptor<Echo_EchoRequest, Echo_EchoResponse>]

  /// - Returns: Interceptors to use when invoking 'hardCodedMessage'.
  func makeHardCodedMessageInterceptors() -> [ClientInterceptor<Echo_EchoRequest, Echo_EchoResponse>]
}

internal enum Echo_EchoServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "EchoService",
    fullName: "echo.EchoService",
    methods: [
      Echo_EchoServiceClientMetadata.Methods.echo,
      Echo_EchoServiceClientMetadata.Methods.hardCodedMessage,
    ]
  )

  internal enum Methods {
    internal static let echo = GRPCMethodDescriptor(
      name: "Echo",
      path: "/echo.EchoService/Echo",
      type: GRPCCallType.unary
    )

    internal static let hardCodedMessage = GRPCMethodDescriptor(
      name: "HardCodedMessage",
      path: "/echo.EchoService/HardCodedMessage",
      type: GRPCCallType.unary
    )
  }
}

/// The Echo service definition.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Echo_EchoServiceProvider: CallHandlerProvider {
  var interceptors: Echo_EchoServiceServerInterceptorFactoryProtocol? { get }

  /// Sends a message to the server and returns the same message.
  func echo(request: Echo_EchoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Echo_EchoResponse>

  /// Returns a hardcoded message regardless of the input.
  func hardCodedMessage(request: Echo_EchoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Echo_EchoResponse>
}

extension Echo_EchoServiceProvider {
  internal var serviceName: Substring {
    return Echo_EchoServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Echo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Echo_EchoRequest>(),
        responseSerializer: ProtobufSerializer<Echo_EchoResponse>(),
        interceptors: self.interceptors?.makeEchoInterceptors() ?? [],
        userFunction: self.echo(request:context:)
      )

    case "HardCodedMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Echo_EchoRequest>(),
        responseSerializer: ProtobufSerializer<Echo_EchoResponse>(),
        interceptors: self.interceptors?.makeHardCodedMessageInterceptors() ?? [],
        userFunction: self.hardCodedMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

/// The Echo service definition.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Echo_EchoServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Echo_EchoServiceServerInterceptorFactoryProtocol? { get }

  /// Sends a message to the server and returns the same message.
  func echo(
    request: Echo_EchoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Echo_EchoResponse

  /// Returns a hardcoded message regardless of the input.
  func hardCodedMessage(
    request: Echo_EchoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Echo_EchoResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Echo_EchoServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Echo_EchoServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Echo_EchoServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Echo_EchoServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Echo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Echo_EchoRequest>(),
        responseSerializer: ProtobufSerializer<Echo_EchoResponse>(),
        interceptors: self.interceptors?.makeEchoInterceptors() ?? [],
        wrapping: { try await self.echo(request: $0, context: $1) }
      )

    case "HardCodedMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Echo_EchoRequest>(),
        responseSerializer: ProtobufSerializer<Echo_EchoResponse>(),
        interceptors: self.interceptors?.makeHardCodedMessageInterceptors() ?? [],
        wrapping: { try await self.hardCodedMessage(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Echo_EchoServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'echo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEchoInterceptors() -> [ServerInterceptor<Echo_EchoRequest, Echo_EchoResponse>]

  /// - Returns: Interceptors to use when handling 'hardCodedMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHardCodedMessageInterceptors() -> [ServerInterceptor<Echo_EchoRequest, Echo_EchoResponse>]
}

internal enum Echo_EchoServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "EchoService",
    fullName: "echo.EchoService",
    methods: [
      Echo_EchoServiceServerMetadata.Methods.echo,
      Echo_EchoServiceServerMetadata.Methods.hardCodedMessage,
    ]
  )

  internal enum Methods {
    internal static let echo = GRPCMethodDescriptor(
      name: "Echo",
      path: "/echo.EchoService/Echo",
      type: GRPCCallType.unary
    )

    internal static let hardCodedMessage = GRPCMethodDescriptor(
      name: "HardCodedMessage",
      path: "/echo.EchoService/HardCodedMessage",
      type: GRPCCallType.unary
    )
  }
}
